import glob
import os
import platform
from waflib.TaskGen import extension, feature, task_gen
from waflib.Task import Task
from waflib import Build

VERSION = '0.1'
APPNAME = 'riscvtool'

top = '.'

def options(opt):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if platform.system().lower().startswith('win'):
        opt.load('msvc')
    elif platform.system().lower().startswith('darwin'):
        opt.load('clang++')
    else:
        opt.load('clang++')

def configure(conf):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if platform.system().lower().startswith('win'):
        conf.load('msvc')
    elif platform.system().lower().startswith('darwin'):
        conf.load('clang++')
    else:
        conf.load('clang++')

def build(bld):

    if platform.system().lower().startswith('win'):
        sdk_lib_path = []
        compile_flags = []
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_WINDOWS']
    elif platform.system().lower().startswith('darwin'):
        sdk_lib_path = []
        compile_flags = ['-std=c++20']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_MACOS']
    else:
        sdk_lib_path = []
        compile_flags = ['-std=c++20']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_LINUX']
    includes = ['source', 'includes']

    # RELEASE
    libs = []
    linker_flags = []

    # Build risctool
    bld.program(
        source=glob.glob('*.cpp'),
        cxxflags=compile_flags,
        ldflags=linker_flags,
        target='riscvtool',
        defines=platform_defines,
        includes=includes,
        libpath=sdk_lib_path,
        lib=libs)

    if platform.system().lower().startswith('win'):
        bld(features='subst', source='riscvtool.exe', target=os.path.abspath('./riscvtool.exe'), is_copy=True)
    else:
        bld(features='subst', source='riscvtool', target=os.path.abspath('./riscvtool'), is_copy=True)
