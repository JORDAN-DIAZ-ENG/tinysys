import glob
import os
import platform
from waflib.TaskGen import extension, feature, task_gen
from waflib.Task import Task
from waflib import Build
from shutil import copyfile

VERSION = '0.1'
APPNAME = 'tinysys'

top = '.'


def options(opt):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if ('COMSPEC' in os.environ):
        opt.load('msvc')
    else:
        opt.load('clang++')

def configure(conf):
    # Prefers msvc, but could also use conf.load('clang++') instead
    if ('COMSPEC' in os.environ):
        conf.env.MSVC_TARGETS = ['x64']
        conf.load('msvc')
        conf.env.PLATFORM = ['windows']
        sdlsourcepath = os.path.abspath('3rdparty/SDL2/lib/x64/SDL2.dll')
        sdltargetpath = os.path.abspath('./build/release/SDL2.dll')
        copyfile(sdlsourcepath, sdltargetpath)
    else:
        conf.load('clang++')

def build(bld):

    bld.post_mode = Build.POST_LAZY

    # RELEASE
    if platform.system().lower().startswith('win'):
        libs = ['ws2_32', 'shell32', 'user32', 'Comdlg32', 'gdi32', 'ole32', 'kernel32', 'winmm', 'SDL2main', 'SDL2']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_WINDOWS', 'DEBUG']
        includes = ['source', 'includes', '3rdparty/SDL2/include']
        sdk_lib_path = os.path.abspath('3rdparty/SDL2/lib/x64/')
        compile_flags =  ['/permissive-', '/arch:AVX', '/std:c++20', '/GL', '/WX', '/Ox', '/Ot', '/Oy', '/fp:fast', '/Qfast_transcendentals', '/Zi', '/EHsc', '/FS', '/DDEBUG', '/D_SECURE_SCL 0', '/Fdtinysys'] # '/DRELEASE'
        linker_flags = ['/DEBUG', '/SUBSYSTEM:CONSOLE', '/LTCG'] # '/RELEASE'
    elif platform.system().lower().startswith('darwin'):
        libs = ['SDL2']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_DARWIN', 'DEBUG']
        includes = ['source', 'includes', '/opt/homebrew/Cellar/sdl2/2.30.0/include']
        sdk_lib_path = '/opt/homebrew/Cellar/sdl2/2.30.0/lib/'
        compile_flags = ['-std=c++20', '-g']
        linker_flags = []
    elif platform.system().lower().startswith('linux'):
        libs = ['SDL2']
        platform_defines = ['_CRT_SECURE_NO_WARNINGS', 'CAT_LINUX', 'DEBUG']
        includes = ['source', 'includes', '/opt/sdl2/2.30.0/include']
        sdk_lib_path = '/opt/sdl2/2.30.0/lib/'
        compile_flags = ['-std=c++20']
        linker_flags = []

    # Build risctool
    bld.program(
        source=glob.glob('*.cpp'),
        cxxflags=compile_flags,
        ldflags=linker_flags,
        target='tinysys',
        defines=platform_defines,
        includes=includes,
        libpath=[sdk_lib_path],
        lib=libs)
